{"version":3,"sources":["typeahead.min.js","typeahead/typeahead.js"],"names":["angular","module","provider","defaults","this","animation","prefixClass","prefixEvent","placement","template","trigger","container","keyboard","html","delay","minLength","filter","limit","comparator","$get","$window","$rootScope","$tooltip","$timeout","TypeaheadFactory","element","controller","config","$typeahead","options","extend","parentScope","scope","$scope","$resetMatches","$matches","$activeIndex","$activate","index","$$postDigest","activate","$select","evt","select","$isVisible","update","matches","length","value","$setViewValue","$render","$digest","$emit","isString","$viewValue","$getIndex","l","i","$onMouseDown","preventDefault","stopPropagation","$onKeyDown","test","keyCode","isUndefined","show","$element","on","hide","off","document","body","directive","$parse","$q","$parseOptions","restrict","require","link","attr","forEach","key","isDefined","ngOptions","parsedOptions","typeahead","watchOptions","watchedOptions","$match","replace","trim","$watch","newValue","oldValue","valuesFn","then","values","ngModel","$modelValue","selectMode","substring","slice","isVisible","$formatters","push","modelValue","displayValue","undefined","$isEmpty","val","selected","label","isObject","toString","$on","destroy"],"mappings":"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","file":"typeahead.min.js","sourcesContent":[null,"'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.typeahead', ['mgcrea.ngStrap.tooltip', 'mgcrea.ngStrap.helpers.parseOptions'])\r\n\r\n  .provider('$typeahead', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      animation: 'am-fade',\r\n      prefixClass: 'typeahead',\r\n      prefixEvent: '$typeahead',\r\n      placement: 'bottom-left',\r\n      template: 'typeahead/typeahead.tpl.html',\r\n      trigger: 'focus',\r\n      container: false,\r\n      keyboard: true,\r\n      html: false,\r\n      delay: 0,\r\n      minLength: 1,\r\n      filter: 'filter',\r\n      limit: 6,\r\n      comparator: ''\r\n    };\r\n\r\n    this.$get = function($window, $rootScope, $tooltip, $timeout) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n\r\n      function TypeaheadFactory(element, controller, config) {\r\n\r\n        var $typeahead = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n\r\n        $typeahead = $tooltip(element, options);\r\n        var parentScope = config.scope;\r\n        var scope = $typeahead.$scope;\r\n\r\n        scope.$resetMatches = function(){\r\n          scope.$matches = [];\r\n          scope.$activeIndex = 0;\r\n        };\r\n        scope.$resetMatches();\r\n\r\n        scope.$activate = function(index) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.activate(index);\r\n          });\r\n        };\r\n\r\n        scope.$select = function(index, evt) {\r\n          scope.$$postDigest(function() {\r\n            $typeahead.select(index);\r\n          });\r\n        };\r\n\r\n        scope.$isVisible = function() {\r\n          return $typeahead.$isVisible();\r\n        };\r\n\r\n        // Public methods\r\n\r\n        $typeahead.update = function(matches) {\r\n          scope.$matches = matches;\r\n          if(scope.$activeIndex >= matches.length) {\r\n            scope.$activeIndex = 0;\r\n          }\r\n        };\r\n\r\n        $typeahead.activate = function(index) {\r\n          scope.$activeIndex = index;\r\n        };\r\n\r\n        $typeahead.select = function(index) {\r\n          var value = scope.$matches[index].value;\r\n          // console.log('$setViewValue', value);\r\n          controller.$setViewValue(value);\r\n          controller.$render();\r\n          scope.$resetMatches();\r\n          if(parentScope) parentScope.$digest();\r\n          // Emit event\r\n          scope.$emit(options.prefixEvent + '.select', value, index);\r\n        };\r\n\r\n        // Protected methods\r\n\r\n        $typeahead.$isVisible = function() {\r\n          if(!options.minLength || !controller) {\r\n            return !!scope.$matches.length;\r\n          }\r\n          // minLength support\r\n          return scope.$matches.length && angular.isString(controller.$viewValue) && controller.$viewValue.length >= options.minLength;\r\n        };\r\n\r\n        $typeahead.$getIndex = function(value) {\r\n          var l = scope.$matches.length, i = l;\r\n          if(!l) return;\r\n          for(i = l; i--;) {\r\n            if(scope.$matches[i].value === value) break;\r\n          }\r\n          if(i < 0) return;\r\n          return i;\r\n        };\r\n\r\n        $typeahead.$onMouseDown = function(evt) {\r\n          // Prevent blur on mousedown\r\n          evt.preventDefault();\r\n          evt.stopPropagation();\r\n        };\r\n\r\n        $typeahead.$onKeyDown = function(evt) {\r\n          if(!/(38|40|13)/.test(evt.keyCode)) return;\r\n\r\n          // Let ngSubmit pass if the typeahead tip is hidden\r\n          if($typeahead.$isVisible()) {\r\n            evt.preventDefault();\r\n            evt.stopPropagation();\r\n          }\r\n\r\n          // Select with enter\r\n          if(evt.keyCode === 13 && scope.$matches.length) {\r\n            $typeahead.select(scope.$activeIndex);\r\n          }\r\n\r\n          // Navigate with keyboard\r\n          else if(evt.keyCode === 38 && scope.$activeIndex > 0) scope.$activeIndex--;\r\n          else if(evt.keyCode === 40 && scope.$activeIndex < scope.$matches.length - 1) scope.$activeIndex++;\r\n          else if(angular.isUndefined(scope.$activeIndex)) scope.$activeIndex = 0;\r\n          scope.$digest();\r\n        };\r\n\r\n        // Overrides\r\n\r\n        var show = $typeahead.show;\r\n        $typeahead.show = function() {\r\n          show();\r\n          // use timeout to hookup the events to prevent\r\n          // event bubbling from being processed imediately.\r\n          $timeout(function() {\r\n            $typeahead.$element.on('mousedown', $typeahead.$onMouseDown);\r\n            if(options.keyboard) {\r\n              element.on('keydown', $typeahead.$onKeyDown);\r\n            }\r\n          }, 0, false);\r\n        };\r\n\r\n        var hide = $typeahead.hide;\r\n        $typeahead.hide = function() {\r\n          $typeahead.$element.off('mousedown', $typeahead.$onMouseDown);\r\n          if(options.keyboard) {\r\n            element.off('keydown', $typeahead.$onKeyDown);\r\n          }\r\n          hide();\r\n        };\r\n\r\n        return $typeahead;\r\n\r\n      }\r\n\r\n      TypeaheadFactory.defaults = defaults;\r\n      return TypeaheadFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsTypeahead', function($window, $parse, $q, $typeahead, $parseOptions) {\r\n\r\n    var defaults = $typeahead.defaults;\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: 'ngModel',\r\n      link: function postLink(scope, element, attr, controller) {\r\n\r\n        // Directive options\r\n        var options = {scope: scope};\r\n        angular.forEach(['placement', 'container', 'delay', 'trigger', 'keyboard', 'html', 'animation', 'template', 'filter', 'limit', 'minLength', 'watchOptions', 'selectMode', 'comparator'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        // Build proper ngOptions\r\n        var filter = options.filter || defaults.filter;\r\n        var limit = options.limit || defaults.limit;\r\n        var comparator = options.comparator || defaults.comparator;\r\n\r\n        var ngOptions = attr.ngOptions;\r\n        if(filter) ngOptions += ' | ' + filter + ':$viewValue';\r\n        if (comparator) ngOptions += ':' + comparator;\r\n        if(limit) ngOptions += ' | limitTo:' + limit;\r\n        var parsedOptions = $parseOptions(ngOptions);\r\n\r\n        // Initialize typeahead\r\n        var typeahead = $typeahead(element, controller, options);\r\n\r\n        // Watch options on demand\r\n        if(options.watchOptions) {\r\n          // Watch ngOptions values before filtering for changes, drop function calls\r\n          var watchedOptions = parsedOptions.$match[7].replace(/\\|.+/, '').replace(/\\(.*\\)/g, '').trim();\r\n          scope.$watch(watchedOptions, function (newValue, oldValue) {\r\n            // console.warn('scope.$watch(%s)', watchedOptions, newValue, oldValue);\r\n            parsedOptions.valuesFn(scope, controller).then(function (values) {\r\n              typeahead.update(values);\r\n              controller.$render();\r\n            });\r\n          }, true);\r\n        }\r\n\r\n        // Watch model for changes\r\n        scope.$watch(attr.ngModel, function(newValue, oldValue) {\r\n          // console.warn('$watch', element.attr('ng-model'), newValue);\r\n          scope.$modelValue = newValue; // Publish modelValue on scope for custom templates\r\n          parsedOptions.valuesFn(scope, controller)\r\n          .then(function(values) {\r\n            // Prevent input with no future prospect if selectMode is truthy\r\n            // @TODO test selectMode\r\n            if(options.selectMode && !values.length && newValue.length > 0) {\r\n              controller.$setViewValue(controller.$viewValue.substring(0, controller.$viewValue.length - 1));\r\n              return;\r\n            }\r\n            if(values.length > limit) values = values.slice(0, limit);\r\n            var isVisible = typeahead.$isVisible();\r\n            isVisible && typeahead.update(values);\r\n            // Do not re-queue an update if a correct value has been selected\r\n            if(values.length === 1 && values[0].value === newValue) return;\r\n            !isVisible && typeahead.update(values);\r\n          });\r\n        });\r\n\r\n        // modelValue -> $formatters -> viewValue\r\n        controller.$formatters.push(function(modelValue) {\r\n          // console.warn('$formatter(\"%s\"): modelValue=%o (%o)', element.attr('ng-model'), modelValue, typeof modelValue);\r\n          var displayValue = parsedOptions.displayValue(modelValue);\r\n          return displayValue === undefined ? '' : displayValue;\r\n        });\r\n\r\n        // Model rendering in view\r\n        controller.$render = function () {\r\n          // console.warn('$render', element.attr('ng-model'), 'controller.$modelValue', typeof controller.$modelValue, controller.$modelValue, 'controller.$viewValue', typeof controller.$viewValue, controller.$viewValue);\r\n          if(controller.$isEmpty(controller.$viewValue)) return element.val('');\r\n          var index = typeahead.$getIndex(controller.$modelValue);\r\n          var selected = angular.isDefined(index) ? typeahead.$scope.$matches[index].label : controller.$viewValue;\r\n          selected = angular.isObject(selected) ? parsedOptions.displayValue(selected) : selected;\r\n          element.val(selected ? selected.toString().replace(/<(?:.|\\n)*?>/gm, '').trim() : '');\r\n        };\r\n\r\n        // Garbage collection\r\n        scope.$on('$destroy', function() {\r\n          if (typeahead) typeahead.destroy();\r\n          options = null;\r\n          typeahead = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}