{"version":3,"sources":["affix.min.js","affix/affix.js"],"names":["angular","module","provider","defaults","this","offsetTop","$get","$window","debounce","dimensions","AffixFactory","element","config","getRequiredAffixClass","unpin","position","elementHeight","scrollTop","getScrollTop","scrollHeight","getScrollHeight","top","offsetBottom","initialAffixTop","targetEl","pageYOffset","document","body","$affix","options","extend","target","reset","setWidth","initialOffsetTop","affixed","parent","offsetParent","match","i","init","$parseOffsets","offset","style","width","on","checkPosition","checkPositionWithEventLoop","windowEl","$debouncedOnResize","destroy","off","setTimeout","height","affix","removeClass","addClass","css","offsetUnpin","bodyEl","offsetHeight","offsetWidth","$onResize","initialPosition","directive","restrict","require","link","scope","attr","affixTarget","$element","forEach","key","isDefined","$on","controller"],"mappings":"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","file":"affix.min.js","sourcesContent":[null,"'use strict';\r\n\r\nangular.module('mgcrea.ngStrap.affix', ['mgcrea.ngStrap.helpers.dimensions', 'mgcrea.ngStrap.helpers.debounce'])\r\n\r\n  .provider('$affix', function() {\r\n\r\n    var defaults = this.defaults = {\r\n      offsetTop: 'auto'\r\n    };\r\n\r\n    this.$get = function($window, debounce, dimensions) {\r\n\r\n      var bodyEl = angular.element($window.document.body);\r\n      var windowEl = angular.element($window);\r\n\r\n      function AffixFactory(element, config) {\r\n\r\n        var $affix = {};\r\n\r\n        // Common vars\r\n        var options = angular.extend({}, defaults, config);\r\n        var targetEl = options.target;\r\n\r\n        // Initial private vars\r\n        var reset = 'affix affix-top affix-bottom',\r\n            setWidth = false,\r\n            initialAffixTop = 0,\r\n            initialOffsetTop = 0,\r\n            offsetTop = 0,\r\n            offsetBottom = 0,\r\n            affixed = null,\r\n            unpin = null;\r\n\r\n        var parent = element.parent();\r\n        // Options: custom parent\r\n        if (options.offsetParent) {\r\n          if (options.offsetParent.match(/^\\d+$/)) {\r\n            for (var i = 0; i < (options.offsetParent * 1) - 1; i++) {\r\n              parent = parent.parent();\r\n            }\r\n          }\r\n          else {\r\n            parent = angular.element(options.offsetParent);\r\n          }\r\n        }\r\n\r\n        $affix.init = function() {\r\n\r\n          this.$parseOffsets();\r\n          initialOffsetTop = dimensions.offset(element[0]).top + initialAffixTop;\r\n          setWidth = !element[0].style.width;\r\n\r\n          // Bind events\r\n          targetEl.on('scroll', this.checkPosition);\r\n          targetEl.on('click', this.checkPositionWithEventLoop);\r\n          windowEl.on('resize', this.$debouncedOnResize);\r\n\r\n          // Both of these checkPosition() calls are necessary for the case where\r\n          // the user hits refresh after scrolling to the bottom of the page.\r\n          this.checkPosition();\r\n          this.checkPositionWithEventLoop();\r\n\r\n        };\r\n\r\n        $affix.destroy = function() {\r\n\r\n          // Unbind events\r\n          targetEl.off('scroll', this.checkPosition);\r\n          targetEl.off('click', this.checkPositionWithEventLoop);\r\n          windowEl.off('resize', this.$debouncedOnResize);\r\n\r\n        };\r\n\r\n        $affix.checkPositionWithEventLoop = function() {\r\n\r\n          // IE 9 throws an error if we use 'this' instead of '$affix'\r\n          // in this setTimeout call\r\n          setTimeout($affix.checkPosition, 1);\r\n\r\n        };\r\n\r\n        $affix.checkPosition = function() {\r\n          // if (!this.$element.is(':visible')) return\r\n\r\n          var scrollTop = getScrollTop();\r\n          var position = dimensions.offset(element[0]);\r\n          var elementHeight = dimensions.height(element[0]);\r\n\r\n          // Get required affix class according to position\r\n          var affix = getRequiredAffixClass(unpin, position, elementHeight);\r\n\r\n          // Did affix status changed this last check?\r\n          if(affixed === affix) return;\r\n          affixed = affix;\r\n\r\n          // Add proper affix class\r\n          element.removeClass(reset).addClass('affix' + ((affix !== 'middle') ? '-' + affix : ''));\r\n\r\n          if(affix === 'top') {\r\n            unpin = null;\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            element.css('top', '');\r\n          } else if(affix === 'bottom') {\r\n            if (options.offsetUnpin) {\r\n              unpin = -(options.offsetUnpin * 1);\r\n            }\r\n            else {\r\n              // Calculate unpin threshold when affixed to bottom.\r\n              // Hopefully the browser scrolls pixel by pixel.\r\n              unpin = position.top - scrollTop;\r\n            }\r\n            if(setWidth) {\r\n              element.css('width', '');\r\n            }\r\n            element.css('position', (options.offsetParent) ? '' : 'relative');\r\n            element.css('top', (options.offsetParent) ? '' : ((bodyEl[0].offsetHeight - offsetBottom - elementHeight - initialOffsetTop) + 'px'));\r\n          } else { // affix === 'middle'\r\n            unpin = null;\r\n            if(setWidth) {\r\n              element.css('width', element[0].offsetWidth + 'px');\r\n            }\r\n            element.css('position', 'fixed');\r\n            element.css('top', initialAffixTop + 'px');\r\n          }\r\n\r\n        };\r\n\r\n        $affix.$onResize = function() {\r\n          $affix.$parseOffsets();\r\n          $affix.checkPosition();\r\n        };\r\n        $affix.$debouncedOnResize = debounce($affix.$onResize, 50);\r\n\r\n        $affix.$parseOffsets = function() {\r\n          var initialPosition = element.css('position');\r\n          // Reset position to calculate correct offsetTop\r\n          element.css('position', (options.offsetParent) ? '' : 'relative');\r\n\r\n          if(options.offsetTop) {\r\n            if(options.offsetTop === 'auto') {\r\n              options.offsetTop = '+0';\r\n            }\r\n            if(options.offsetTop.match(/^[-+]\\d+$/)) {\r\n              initialAffixTop = - options.offsetTop * 1;\r\n              if(options.offsetParent) {\r\n                offsetTop = dimensions.offset(parent[0]).top + (options.offsetTop * 1);\r\n              }\r\n              else {\r\n                offsetTop = dimensions.offset(element[0]).top - dimensions.css(element[0], 'marginTop', true) + (options.offsetTop * 1);\r\n              }\r\n            }\r\n            else {\r\n              offsetTop = options.offsetTop * 1;\r\n            }\r\n          }\r\n\r\n          if(options.offsetBottom) {\r\n            if(options.offsetParent && options.offsetBottom.match(/^[-+]\\d+$/)) {\r\n              // add 1 pixel due to rounding problems...\r\n              offsetBottom = getScrollHeight() - (dimensions.offset(parent[0]).top + dimensions.height(parent[0])) + (options.offsetBottom * 1) + 1;\r\n            }\r\n            else {\r\n              offsetBottom = options.offsetBottom * 1;\r\n            }\r\n          }\r\n\r\n          // Bring back the element's position after calculations\r\n          element.css('position', initialPosition);\r\n        };\r\n\r\n        // Private methods\r\n\r\n        function getRequiredAffixClass(unpin, position, elementHeight) {\r\n\r\n          var scrollTop = getScrollTop();\r\n          var scrollHeight = getScrollHeight();\r\n\r\n          if(scrollTop <= offsetTop) {\r\n            return 'top';\r\n          } else if(unpin !== null && (scrollTop + unpin <= position.top)) {\r\n            return 'middle';\r\n          } else if(offsetBottom !== null && (position.top + elementHeight + initialAffixTop >= scrollHeight - offsetBottom)) {\r\n            return 'bottom';\r\n          } else {\r\n            return 'middle';\r\n          }\r\n\r\n        }\r\n\r\n        function getScrollTop() {\r\n          return targetEl[0] === $window ? $window.pageYOffset : targetEl[0].scrollTop;\r\n        }\r\n\r\n        function getScrollHeight() {\r\n          return targetEl[0] === $window ? $window.document.body.scrollHeight : targetEl[0].scrollHeight;\r\n        }\r\n\r\n        $affix.init();\r\n        return $affix;\r\n\r\n      }\r\n\r\n      return AffixFactory;\r\n\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffix', function($affix, $window) {\r\n\r\n    return {\r\n      restrict: 'EAC',\r\n      require: '^?bsAffixTarget',\r\n      link: function postLink(scope, element, attr, affixTarget) {\r\n\r\n        var options = {scope: scope, offsetTop: 'auto', target: affixTarget ? affixTarget.$element : angular.element($window)};\r\n        angular.forEach(['offsetTop', 'offsetBottom', 'offsetParent', 'offsetUnpin'], function(key) {\r\n          if(angular.isDefined(attr[key])) options[key] = attr[key];\r\n        });\r\n\r\n        var affix = $affix(element, options);\r\n        scope.$on('$destroy', function() {\r\n          affix && affix.destroy();\r\n          options = null;\r\n          affix = null;\r\n        });\r\n\r\n      }\r\n    };\r\n\r\n  })\r\n\r\n  .directive('bsAffixTarget', function() {\r\n    return {\r\n      controller: function($element) {\r\n        this.$element = $element;\r\n      }\r\n    };\r\n  });\r\n"],"sourceRoot":"/source/"}